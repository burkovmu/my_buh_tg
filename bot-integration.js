const TelegramBot = require('node-telegram-bot-api');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserBalance(telegramId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('telegram_id', telegramId);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return null;
    }

    if (!transactions || transactions.length === 0) {
      return {
        balance: 0,
        income: 0,
        expense: 0,
        count: 0
      };
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    let income = 0;
    let expense = 0;

    transactions.forEach(transaction => {
      if (transaction.type === 'income') {
        income += transaction.amount;
      } else if (transaction.type === 'expense') {
        expense += transaction.amount;
      }
    });

    const balance = income - expense;

    return {
      balance,
      income,
      expense,
      count: transactions.length
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function getUserTransactions(telegramId, limit = 5) {
  try {
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('telegram_id', telegramId)
      .order('date', { ascending: false })
      .limit(limit);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return null;
    }

    return transactions || [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã
function formatAmount(amount) {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB'
  }).format(amount);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  const username = msg.from.username || msg.from.first_name;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  try {
    await supabase
      .from('users')
      .upsert({
        telegram_id: telegramId,
        username: username,
        first_name: msg.from.first_name,
        last_name: msg.from.last_name,
        last_activity: new Date().toISOString()
      });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
  
  const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${username}!

üí∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É—á–µ—Ç–∞!

üì± –û—Ç–∫—Ä–æ–π—Ç–µ Mini App –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏:
${process.env.MINI_APP_URL || 'https://your-app.vercel.app'}

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/balance - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
/transactions - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!`;

  const keyboard = {
    inline_keyboard: [
      [{
        text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        web_app: { url: process.env.MINI_APP_URL || 'https://your-app.vercel.app' }
      }],
      [{
        text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å',
        callback_data: 'show_balance'
      }],
      [{
        text: 'üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
        callback_data: 'show_transactions'
      }]
    ]
  };

  await bot.sendMessage(chatId, welcomeMessage, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
bot.onText(/\/balance/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  
  const balance = await getUserBalance(telegramId);
  
  if (balance === null) {
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  const message = `üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>

üíµ –ë–∞–ª–∞–Ω—Å: ${formatAmount(balance.balance)}
üìà –î–æ—Ö–æ–¥—ã: ${formatAmount(balance.income)}
üìâ –†–∞—Å—Ö–æ–¥—ã: ${formatAmount(balance.expense)}
üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${balance.count}

üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!`;

  await bot.sendMessage(chatId, message, {
    parse_mode: 'HTML'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /transactions
bot.onText(/\/transactions/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  
  const transactions = await getUserTransactions(telegramId, 10);
  
  if (transactions === null) {
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  if (transactions.length === 0) {
    await bot.sendMessage(chatId, 'üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é!', {
      parse_mode: 'HTML'
    });
    return;
  }

  let message = 'üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n\n';
  
  transactions.forEach((transaction, index) => {
    const emoji = transaction.type === 'income' ? 'üìà' : 'üìâ';
    const sign = transaction.type === 'income' ? '+' : '-';
    const amount = formatAmount(transaction.amount);
    const date = formatDate(transaction.date);
    
    message += `${emoji} <b>${transaction.source}</b>\n`;
    message += `   ${sign}${amount}\n`;
    if (transaction.comment) {
      message += `   üí¨ ${transaction.comment}\n`;
    }
    message += `   üìÖ ${date}\n\n`;
  });

  message += 'üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!';

  await bot.sendMessage(chatId, message, {
    parse_mode: 'HTML'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const telegramId = query.from.id;
  const data = query.data;

  switch (data) {
    case 'show_balance':
      const balance = await getUserBalance(telegramId);
      
      if (balance === null) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        break;
      }

      const balanceMessage = `üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>

üíµ –ë–∞–ª–∞–Ω—Å: ${formatAmount(balance.balance)}
üìà –î–æ—Ö–æ–¥—ã: ${formatAmount(balance.income)}
üìâ –†–∞—Å—Ö–æ–¥—ã: ${formatAmount(balance.expense)}
üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${balance.count}

üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!`;

      await bot.sendMessage(chatId, balanceMessage, {
        parse_mode: 'HTML'
      });
      break;
      
    case 'show_transactions':
      const transactions = await getUserTransactions(telegramId, 5);
      
      if (transactions === null) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        break;
      }

      if (transactions.length === 0) {
        await bot.sendMessage(chatId, 'üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é!', {
          parse_mode: 'HTML'
        });
        break;
      }

      let transactionsMessage = 'üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n\n';
      
      transactions.forEach((transaction) => {
        const emoji = transaction.type === 'income' ? 'üìà' : 'üìâ';
        const sign = transaction.type === 'income' ? '+' : '-';
        const amount = formatAmount(transaction.amount);
        const date = formatDate(transaction.date);
        
        transactionsMessage += `${emoji} <b>${transaction.source}</b>\n`;
        transactionsMessage += `   ${sign}${amount}\n`;
        if (transaction.comment) {
          transactionsMessage += `   üí¨ ${transaction.comment}\n`;
        }
        transactionsMessage += `   üìÖ ${date}\n\n`;
      });

      transactionsMessage += 'üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!';

      await bot.sendMessage(chatId, transactionsMessage, {
        parse_mode: 'HTML'
      });
      break;
      
    default:
      await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  }
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
  await bot.answerCallbackQuery(query.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
console.log('üì± Mini App URL:', process.env.MINI_APP_URL || 'https://your-app.vercel.app');
console.log('üîó Supabase URL:', process.env.SUPABASE_URL || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stopPolling();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stopPolling();
  process.exit(0);
}); 